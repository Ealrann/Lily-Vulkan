import org.gradle.internal.os.OperatingSystem

plugins {
	id 'org.javamodularity.moduleplugin' version '1.5.0' apply false
}

project.ext.targetPlatform = OperatingSystem.current()
switch (targetPlatform) {
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
}

subprojects {

	apply plugin: 'eclipse'
	apply plugin: 'org.javamodularity.moduleplugin'

	version "1.0.7"

	sourceCompatibility = 11
	targetCompatibility = 11

	eclipse {
		classpath {
			file {
				whenMerged {
					//Define a module as being either a library or a project dependency.
					//Test sources are excluded because eclipse wants them on the classpath for some reason (1)
					entries.findAll { isModule(it) }.each {
						it.entryAttributes['module'] = 'true'
					}
					//Test-scoped stuff should set the appropriate flag
					entries.findAll { isTest(it) }.each {
						it.entryAttributes['test'] = 'true'
					}
				}
			}
		}
	}

	afterEvaluate {
		repositories {
			jcenter()
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
			maven {
				url "https://maven.pkg.github.com/ealrann/emf-standalone"
				credentials {
					username = findProperty("github.username")
					password = findProperty("github.token")
				}
			}
		}
	}
}

boolean isLibrary(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.Library }
boolean isProjectDependency(entry) { return entry instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency }

boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }

boolean isModule(entry) { (isLibrary(entry) || isProjectDependency(entry)) && !isTestScope(entry); }
boolean isTest(entry) { (isSource(entry) || isLibrary(entry)) && isTestScope(entry); }
