buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url "https://plugins.gradle.org/m2/" }
		jcenter()
	}
	dependencies {
		classpath "org.javamodularity:moduleplugin:1.2.1"
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}


project.ext.jomlVersion = "1.9.12"
project.ext.lwjglVersion = "3.2.1"

subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: "org.javamodularity.moduleplugin"

	eclipse {
		classpath {
			file {
				whenMerged {
					//Define a module as being either a library or a project dependency.
					//Test sources are excluded because eclipse wants them on the classpath for some reason (1)
					entries.findAll { (it instanceof org.gradle.plugins.ide.eclipse.model.Library || it instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency) && !it.entryAttributes.get('gradle_used_by_scope').equals('test') }.each {
						it.entryAttributes['module'] = 'true'
					}

					//Test-scoped stuff should set the appropriate flag
					entries.findAll { (it.properties.kind.equals('src') || it.properties.kind.equals('lib')) && it.entryAttributes.get('gradle_used_by_scope').equals('test') }.each {
						it.entryAttributes['test'] = 'true'
					}
				}
			}
		}
	}

	afterEvaluate {
		repositories {
			mavenLocal()
			jcenter()
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
			maven { url "https://oss.sonatype.org/content/repositories/releases/" }
			maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
			maven { url 'https://jitpack.io' }
		}
	}
}

boolean isLibrary(entry) { return entry.properties.kind.equals('lib') }
boolean isTestScope(entry) { return entry.entryAttributes.get('gradle_used_by_scope').equals('test'); }
boolean isModule(entry) { isLibrary(entry) && !isTestScope(entry); }
boolean isSource(entry) { return entry.properties.kind.equals('src'); }
